// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using playerStats.Data;

#nullable disable

namespace playerStats.Migrations
{
    [DbContext(typeof(PlayerContext))]
    [Migration("20230613211257_MyFirstMigration")]
    partial class MyFirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("playerStats.Models.Games", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Home_team_id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Home_team_score")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Season")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Visitor_team_id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Visitor_team_score")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("playerStats.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("First_name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Height_feet")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Height_inches")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Last_name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Team_id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Weight_pounds")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("playerStats.Models.Stats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Ast")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Blk")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Dreb")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Fg3_pct")
                        .HasColumnType("REAL");

                    b.Property<float>("Fg3a")
                        .HasColumnType("REAL");

                    b.Property<float>("Fg3m")
                        .HasColumnType("REAL");

                    b.Property<float>("Fg_pct")
                        .HasColumnType("REAL");

                    b.Property<int>("Fga")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Fgm")
                        .HasColumnType("REAL");

                    b.Property<float>("Ft_pct")
                        .HasColumnType("REAL");

                    b.Property<int>("Fta")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Ftm")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Min")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Oreb")
                        .HasColumnType("REAL");

                    b.Property<int>("Pf")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Reb")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Stl")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Turnover")
                        .HasColumnType("INTEGER");

                    b.Property<int>("pts")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("playerStats.Models.Teams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Conference")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Division")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Full_name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("playerStats.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("playerStats.Models.Player", b =>
                {
                    b.HasOne("playerStats.Models.User", null)
                        .WithMany("FavoritePlayers")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("playerStats.Models.Stats", b =>
                {
                    b.HasOne("playerStats.Models.Games", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("playerStats.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("playerStats.Models.Teams", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("playerStats.Models.User", b =>
                {
                    b.Navigation("FavoritePlayers");
                });
#pragma warning restore 612, 618
        }
    }
}
